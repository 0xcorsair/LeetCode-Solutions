// may 4
//
//

class Solution 
{
public:
    bool exist(vector<vector<char>>& board, string word) 
    {
        int m = board.size(), n = board[0].size();

        // a matrix of m*n of visited
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(dfs(board, visited, i, j, 0, word))
                    return true;
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, vector<vector<bool>>& visited, int i, int j, int k, string word)
    {
        if(board[i][j] != word[k])
            return false;
        else
        {
            if(k == word.size()-1)
                return true;
        }
        
        visited[i][j] = true;
        bool res = false;
        if(i > 0 && !visited[i-1][j])
            res = res || dfs(board, visited, i-1, j, k+1, word);
        if(j > 0 && !visited[i][j-1])
            res = res || dfs(board, visited, i, j-1, k+1, word);
        if(i < board.size()-1 && !visited[i+1][j])
            res = res || dfs(board, visited, i+1, j, k+1, word);
        if(j < board[0].size()-1 && !visited[i][j+1])
            res = res || dfs(board, visited, i, j+1, k+1, word);
        visited[i][j] = false;
        return res;
    }
};

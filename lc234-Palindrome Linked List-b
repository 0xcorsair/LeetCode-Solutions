/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution 
{
public:
    bool isPalindrome(ListNode* head) 
    {
        //empty linked list or a linked list with ONE element
        if (!head || !head->next) 
        {
            return true;
        }
        
        //the strategy is:
        //use two pointers to find the middle of the linked list, 
        //reverse the second half of the list, and then compare the first half with 
        //the reversed second half. If they match, then the list is a palindrome

        ListNode* slow = head;
        ListNode* fast = head;
        while (fast && fast->next) 
        {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        if (fast) 
        {
            slow = slow->next;
        }
        
        ListNode* prev = nullptr;

        while (slow) 
        {
            ListNode* next = slow->next;
            slow->next = prev;
            prev = slow;
            slow = next;
        }
        
        while (prev) 
        {
            if (prev->val != head->val) 
            {
                return false;
            }
            prev = prev->next;
            head = head->next;
        }
        
        return true;
    }
};

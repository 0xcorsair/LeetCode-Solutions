/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
    //strategy is 
    // we know the array representation of any binary tree
    // just convert it to levels
    // notice that
    // an array presentation of a binary tree is like
    // [t0, t1, t2, ... , ti,... tn-1]
    // where t0 is level one
    // t1, t2 is level two
    // ... each level has 2^level_number elements


class Solution 
{
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> result;
        if (root == NULL) 
        {
            return result;
        }
        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) 
        {
            int level_size = q.size();
            vector<int> level;
            for (int i = 0; i < level_size; i++) 
            {
                TreeNode* node = q.front(); // get the first element of queue
                q.pop();  // remove it 

                level.push_back(node->val); 

                if (node->left != NULL) 
                {
                    q.push(node->left);
                }
                if (node->right != NULL) 
                {
                    q.push(node->right);
                }
            }
            result.push_back(level);
        }

        
        return result;
    }
};

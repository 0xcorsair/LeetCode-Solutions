/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution 
{
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        // Create a map to store the indices of the nodes in the inorder sequence
        unordered_map<int, int> index_map;
        for (int i = 0; i < inorder.size(); i++) 
        {
            index_map[inorder[i]] = i;
        }
        
        // Call the recursive helper function to build the tree
        return buildTreeHelper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, index_map);
    }
    
    TreeNode* buildTreeHelper(vector<int>& preorder, int pre_start, int pre_end, vector<int>& inorder, int in_start, int in_end, unordered_map<int, int>& index_map) 
    {
        // Base case: if the preorder or inorder sequence is empty, return NULL
        if (pre_start > pre_end || in_start > in_end) 
        {
            return NULL;
        }
        
        // Find the root node of the current subtree in the preorder sequence
        TreeNode* root = new TreeNode(preorder[pre_start]);
        
        // Find the index of the root node in the inorder sequence
        int in_root_index = index_map[root->val];
        
        // Calculate the size of the left subtree
        int left_subtree_size = in_root_index - in_start;
        
        // Recursively build the left and right subtrees
        root->left = buildTreeHelper(preorder, pre_start + 1, pre_start + left_subtree_size, inorder, in_start, in_root_index - 1, index_map);
        root->right = buildTreeHelper(preorder, pre_start + left_subtree_size + 1, pre_end, inorder, in_root_index + 1, in_end, index_map);
        
        return root;
    }
};

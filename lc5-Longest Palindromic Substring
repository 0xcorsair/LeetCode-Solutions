#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Solution 
{
public:
    string longestPalindrome(string s) 
    {

    int n = s.size();
    // declare a vector of vector of booleans called dp
    // initialize it, such that dp has n elements
    // each element is a vector of n bools where each bool has value false
    vector<vector<bool>> dp(n, vector<bool>(n, false)); 
    int start = 0, len = 1;

    // base case: all substrings of length 1 are palindromes
    for (int i = 0; i < n; i++) 
    {
        dp[i][i] = true;
    }

    // check substrings of length 2
    for (int i = 0; i < n - 1; i++) 
    {
        if (s[i] == s[i+1]) 
        {
            dp[i][i+1] = true;
            start = i;
            len = 2;
        }
    }

    // check substrings of length 3 or more
    for (int l = 3; l <= n; l++) 
    {
        for (int i = 0; i <= n - l; i++) 
        {
            int j = i + l - 1;
            if (s[i] == s[j] && dp[i+1][j-1]) 
            {
                dp[i][j] = true;
                start = i;
                len = l;
            }
        }
    }

    return s.substr(start, len);
    }
};

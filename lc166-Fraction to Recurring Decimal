// may 16
//

class Solution 
{
public:
    string fractionToDecimal(int numerator, int denominator) 
    {
        if (numerator == 0) 
        {
            return "0";
        }

        string result;

        // Handle sign
        if (numerator < 0 ^ denominator < 0) 
        {
            result += "-";
        }

        long long dividend = abs(static_cast<long long>(numerator));
        long long divisor = abs(static_cast<long long>(denominator));

        // Integer part
        result += to_string(dividend / divisor);
        long long remainder = dividend % divisor;

        if (remainder == 0) 
        {
            return result;
        }

        // Fractional part
        result += ".";
        unordered_map<long long, int> remainderMap;

        while (remainder != 0) 
        {
            if (remainderMap.find(remainder) != remainderMap.end()) 
            {
                // Found repeating remainder, insert '(' and ')'
                result.insert(remainderMap[remainder], "(");
                result += ")";
                break;
            }

            remainderMap[remainder] = result.length();
            remainder *= 10;
            result += to_string(remainder / divisor);
            remainder %= divisor;
        }

        return result;
    }

};

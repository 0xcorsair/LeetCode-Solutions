// may 17
//

class Solution 
{
public:


    int maxPoints(vector<vector<int>>& points) 
    {
        int n = points.size();
        if (n <= 2) 
        {
            return n;  // If there are less than 3 points, all points are on the same line
        }

        int maxPointsCount = 0;
        for (int i = 0; i < n; i++) 
        {
            unordered_map<double, int> slopeCount;
            int duplicatePoints = 1;  // Number of points with the same coordinates as points[i]

            for (int j = i + 1; j < n; j++) 
            {
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];

                if (dx == 0 && dy == 0) 
                {
                    duplicatePoints++;
                    continue;
                }

                double slope = (dx == 0) ? INT_MAX : (double)dy / dx;
                slopeCount[slope]++;
            }

            int currentMax = duplicatePoints;
            for (auto& entry : slopeCount) 
            {
                int pointsOnLine = entry.second + duplicatePoints;
                currentMax = max(currentMax, pointsOnLine);
            }

            maxPointsCount = max(maxPointsCount, currentMax);
        }

        return maxPointsCount;
    }
};

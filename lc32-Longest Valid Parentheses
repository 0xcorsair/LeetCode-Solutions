#include <stack>
#include <algorithm>

class Solution 
{
public:
    int longestValidParentheses(string s) 
    {
        int n = s.size();
        stack<int> st;
        st.push(-1);  // dummy index to mark the start of a valid parentheses sequence
        int ans = 0;


        for (int i = 0; i < n; i++) 
        {
            if (s[i] == '(') 
            {
                st.push(i);
            } 
            else 
            {
                st.pop();
                // The popped index was the only one on the stack, 
                // which means the current sequence is invalid
                if (st.empty()) 
                {
                    st.push(i);  // Add the current index as the start of a new potential valid sequence
                } 
                else 
                {
                    ans = max(ans, i - st.top()); 
                }
            }
        }
        return ans;
    }
};

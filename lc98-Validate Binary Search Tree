/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 // strategy is...
 // we have formulae for each node
 // for each node, validate it using formualae
 // formulae
 // 1) the index of a node's left child is 2*i + 1, where i is the index of the node
 // 2) the index of a node's right child is 2*i +2
 // 3) the index of a node's parent is (i-1)/2
 // as we have the index of the node and its parent, we can compre their value
// or we can check it using recursion, as follows

 
class Solution 
{
public:
    bool isValidBST(TreeNode* root) 
    {
        return isValidBST(root, LONG_MIN, LONG_MAX);
    }
    
    bool isValidBST(TreeNode* node, long min_val, long max_val) 
    {
        if (node == nullptr) 
        {
            return true;
        }
        if (node->val <= min_val || node->val >= max_val) 
        {
            return false;
        }
        return isValidBST(node->left, min_val, node->val) && 
               isValidBST(node->right, node->val, max_val);
    }
};

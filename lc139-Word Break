// may 5
//
//

#include <unordered_set>
#include <string>
#include <vector>

using namespace std;

class Solution 
{
public:
    bool wordBreak(string s, vector<string>& wordDict) 
    {
        unordered_set<string> dict(wordDict.begin(), wordDict.end());
        int n = s.length();

        // dp[i] means if s[0...i-1] can be segmented into words in the wordDict
        vector<bool> dp(n + 1, false);

        dp[0] = true; // empty string is always a valid segmentation

        for (int i = 1; i <= n; ++i) 
        {
            for (int j = i - 1; j >= 0; --j) 
            {
                if (dp[j] && dict.count(s.substr(j, i - j))) 
                {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
};



class Solution 
{
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) 
    {
        deque<int> dq;
        vector<int> res;
        int n = nums.size();
        
        for(int i = 0; i < n; i++) 
        {
            // check if the leftmost element is out of the current window
            if(!dq.empty() && dq.front() == i - k)
                dq.pop_front();
            
            // remove all elements smaller than nums[i] from the deque
            while(!dq.empty() && nums[dq.back()] < nums[i])
                dq.pop_back();
            
            // add the current index to the deque
            dq.push_back(i);
            
            // add the maximum element to the result vector
            if(i >= k - 1)
                res.push_back(nums[dq.front()]);
        }
        
        return res;
    }
};

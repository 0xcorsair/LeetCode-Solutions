// may 6
//
//

class TrieNode 
{
public:
    bool isEnd;
    vector<TrieNode*> children;
    
    TrieNode() 
    {
        isEnd = false;
        children = vector<TrieNode*>(26, nullptr);
    }
    
    ~TrieNode() 
    {
        for (auto child : children) 
        {
            delete child;
        }
    }
};

class Trie 
{
public:
    TrieNode* root;
    
    Trie() 
    {
        root = new TrieNode();
    }
    
    ~Trie() 
    {
        delete root;
    }
    
    void insert(string word) 
    {
        TrieNode* curr = root;
        for (char c : word) 
        {
            if (curr->children[c-'a'] == nullptr) 
            {
                curr->children[c-'a'] = new TrieNode();
            }
            curr = curr->children[c-'a'];
        }
        curr->isEnd = true;
    }
    
    bool search(string word) 
    {
        TrieNode* curr = root;
        for (char c : word) 
        {
            if (curr->children[c-'a'] == nullptr) 
            {
                return false;
            }
            curr = curr->children[c-'a'];
        }
        return curr->isEnd;
    }
    
    bool startsWith(string prefix) 
    {
        TrieNode* curr = root;
        for (char c : prefix) 
        {
            if (curr->children[c-'a'] == nullptr) 
            {
                return false;
            }
            curr = curr->children[c-'a'];
        }
        return true;
    }
};


/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

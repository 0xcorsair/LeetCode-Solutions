// may 13



class Solution 
{
public:
    vector<vector<string>> partition(string s) 
    {
        vector<vector<string>> result;
        vector<string> path;
        dfs(s, 0, path, result);
        return result;
    }
    
    void dfs(string& s, int start, vector<string>& path, vector<vector<string>>& result) 
    {
        if (start == s.length()) 
        {
            result.push_back(path);
            return;
        }
        
        for (int i = start; i < s.length(); i++) 
        {
            if (isPalindrome(s, start, i)) 
            {
                string str = s.substr(start, i - start + 1);
                path.push_back(str);
                dfs(s, i + 1, path, result);
                path.pop_back();
            }
        }
    }
    
    bool isPalindrome(string& s, int left, int right) 
    {
        while (left < right) 
        {
            if (s[left] != s[right]) 
            {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
};

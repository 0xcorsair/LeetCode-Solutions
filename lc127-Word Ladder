//may 13
//


class Solution 
{
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) 
    {
        unordered_set<string> dict(wordList.begin(), wordList.end());
        if (dict.find(endWord) == dict.end()) return 0; // endWord not in wordList
        
        queue<string> q;
        q.push(beginWord);
        int ladder = 1;
        
        while (!q.empty()) 
        {
            int size = q.size();
            for (int i = 0; i < size; i++) 
            {
                string curr = q.front(); q.pop();
                if (curr == endWord) return ladder;
                dict.erase(curr); // mark as visited
                
                for (int j = 0; j < curr.length(); j++) 
                {
                    char originalChar = curr[j];
                    for (char c = 'a'; c <= 'z'; c++) 
                    {
                        curr[j] = c;
                        if (dict.find(curr) != dict.end()) 
                        {
                            q.push(curr);
                        }
                    }
                    curr[j] = originalChar; // restore the original character
                }
            }
            ladder++;
        }
        return 0; // endWord is not reachable from beginWord
    }
};

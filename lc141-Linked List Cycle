/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution 
{
public:
    bool hasCycle(ListNode *head) 
    {
        if (!head) //to check if the list is empty, i.e. head is NULL
        {
            return false;
        }

        ListNode *slow = head;
        ListNode *fast = head->next;
        
        // slow = 0
        // fast = 0->1

        while (fast && fast->next) 
        // initially, 0->1 and 0->1->2
        {
            if (slow == fast) 
            {
                return true;
            }
            // the point is, if there is a cycle, then there is an infinite loop
            // in this loop, slow will eventually catch up with fast
            // if so, then the loop exists, then the cycle exists
            slow = slow->next;
            fast = fast->next->next;
        }
        return false;
    }
};

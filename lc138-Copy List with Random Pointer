// may 14
//

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/


class Solution 
{
public:
    Node* copyRandomList(Node* head) 
    {
        if (head == nullptr) return nullptr;

        // Step 1: Create new nodes and link them to the original nodes
        Node* curr = head;
        while (curr != nullptr) 
        {
            Node* copy = new Node(curr->val);
            copy->next = curr->next;
            curr->next = copy;
            curr = copy->next;
        }

        // Step 2: Assign random pointers for the copied nodes
        curr = head;
        while (curr != nullptr) 
        {
            if (curr->random != nullptr) 
            {
                curr->next->random = curr->random->next;
            }
            curr = curr->next->next;
        }

        // Step 3: Separate the original and copied linked lists
        curr = head;
        Node* newHead = head->next;
        Node* copyCurr = newHead;
        while (curr != nullptr) 
        {
            curr->next = curr->next->next;
            if (copyCurr->next != nullptr) 
            {
                copyCurr->next = copyCurr->next->next;
            }
            curr = curr->next;
            copyCurr = copyCurr->next;
        }

        return newHead;
    }
};
